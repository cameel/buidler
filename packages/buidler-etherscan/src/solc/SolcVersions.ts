//TODO: review these imports
import { CompilersList } from "@nomiclabs/buidler/internal/solidity/compiler/downloader";
import { BuidlerPluginError } from "@nomiclabs/buidler/plugins";
import request from "request-promise";

const COMPILERS_LIST_URL =
  "https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.json";

export class SolcVersionNumber {
    constructor(readonly major: number, readonly minor: number, readonly patch: number) {};
    async getLongVersion(): Promise<string> {
      //TODO: Review. The URL could be a parameter perhaps.
      const shortVersion = `${this.major}.{this.minor}.{this.patch}`;
      const versions = await getVersions();
      const fullVersion = versions.releases[shortVersion];

      if (fullVersion === undefined || fullVersion === "") {
        //TODO: throw an unknown version error here and handle it at the task level.
        throw new BuidlerPluginError("Given solc version doesn't exist");
      }

      return fullVersion.replace(/(soljson-)(.*)(.js)/, "$2");
    }
}

interface SolcVersionRange {
  /**
  * @returns true if the version is included in the range.
  */
  isIncluded(version: SolcVersionNumber): boolean;
}

export function getVersionNumber(shortVersion: string): SolcVersionNumber {
  const [ major, minor, patch ] = shortVersion.split(".", 2).map((value) => parseInt(value));
  return new SolcVersionNumber(major, minor, patch);
}

export async function inferSolcVersion(bytecode: string): Promise<SolcVersionRange> {
  const { decodeSolcCBORMetadata, VersionNotFoundError } = await import("./metadata");
  let solcVersionMetadata: SolcVersionNumber;
  try {
    solcVersionMetadata = await decodeSolcCBORMetadata(bytecode);
  } catch (error) {
    // We want to provide our best inference here.
    // We can infer that some solidity compiler releases couldn't have produced this bytecode.
    // Solc v0.4.7 was the first compiler to introduce metadata into the generated bytecode.
    // See https://solidity.readthedocs.io/en/v0.4.7/miscellaneous.html#contract-metadata
    // Solc v0.4.26, the last release for the v0.4 series, does not feature the compiler version in its emitted metadata.
    // See https://solidity.readthedocs.io/en/v0.4.26/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    // Solc v0.5.9 was the first compiler to introduce its version into the metadata.
    // See https://solidity.readthedocs.io/en/v0.5.9/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    // Solc v0.6.0 features compiler version metadata.
    // See https://solidity.readthedocs.io/en/v0.6.0/metadata.html#encoding-of-the-metadata-hash-in-the-bytecode
    if (error instanceof VersionNotFoundError) {
      // The embedded metadata was successfully decoded but there was no solc version in it.
      return {
        isIncluded: (version: SolcVersionNumber): boolean => {
          return version.major == 0 &&
            ((version.minor == 4 && version.patch >= 7) ||
              (version.minor == 5 && version.patch < 9));
        }
      };
    } else {
      // The decoding failed. Unfortunately, our only option is to assume that this bytecode was emitted by an old version.
      return {
        isIncluded: (version: SolcVersionNumber): boolean => {
          return version.major == 0 &&
            version.minor == 4 &&
            version.patch < 7;
        }
      };
    }
  }

  return {
    isIncluded: (version: SolcVersionNumber): boolean => {
      return version.major == solcVersionMetadata.major &&
        version.minor == solcVersionMetadata.minor &&
        version.patch == solcVersionMetadata.patch;
    }
  };

}



// TODO: Review. See getLongVersion.
export async function getVersions(): Promise<CompilersList> {
  try {
    // tslint:disable-next-line: await-promise
    return await request.get(COMPILERS_LIST_URL, { json: true });
  } catch (e) {
    throw new BuidlerPluginError(
      `Failed to obtain full solc version. Reason: ${e.message}`
    );
  }
}

